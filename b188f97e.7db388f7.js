(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{215:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var i=n(2),r=n(11),a=(n(0),n(242)),o={title:"Adding your first test"},l={id:"contributing/adding-your-first-test",isDocsHomePage:!1,title:"Adding your first test",description:"Let's talk you through the first contribution. You'll write a small unit test",source:"@site/docs/contributing/adding-your-first-test.md",permalink:"/contributing/adding-your-first-test",sidebar:"Contributing",previous:{title:"Setting up the Dark repo",permalink:"/contributing/setting-up-the-repo"},next:{title:"Making your first Pull Request",permalink:"/contributing/making-your-first-pull-request"}},s=[{value:"Find a function that needs tests",id:"find-a-function-that-needs-tests",children:[]},{value:"Adding the test",id:"adding-the-test",children:[]}],c={rightToc:s};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Let's talk you through the first contribution. You'll write a small unit test\nfor a built-in function. This will get you through the process of contributing\nand get you familiar with how to get code into Dark."),Object(a.b)("h2",{id:"find-a-function-that-needs-tests"},"Find a function that needs tests"),Object(a.b)("p",null,"Assuming the repo is set up and the ",Object(a.b)("inlineCode",{parentName:"p"},"builder")," script is running, let's find\nsomething to test."),Object(a.b)("p",null,"First let's see what functions exists:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},'grep -hoP "[A-Z][A-Za-z]+::[_a-zA-Z0-9]+" backend/libexecution/ -R | sort | uniq > exists')),Object(a.b)("p",null,"And now which ones are tested:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},'grep -hoP "[A-Z][A-Za-z]+::[_a-zA-Z0-9]+" backend/test -R | sort | uniq > tested')),Object(a.b)("p",null,"(Note that if these commands don't work for you, you can open a shell in the dev container with ",Object(a.b)("inlineCode",{parentName:"p"},"./scripts/run-in-docker bash"),", and run them there)."),Object(a.b)("p",null,"Now compare them:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"diff tested exists")),Object(a.b)("p",null,"You'll see stuff like this (with a ",Object(a.b)("inlineCode",{parentName:"p"},">"),"):"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ocaml"}),"136a169\n> List::member\n137a171\n> List::pushBack\n139a174,175\n> List::repeat\n> List::reverse\n")),Object(a.b)("p",null,"These are the functions that need tests, so pick your favorite."),Object(a.b)("h2",{id:"adding-the-test"},"Adding the test"),Object(a.b)("p",null,"As an example, let's add one for ",Object(a.b)("inlineCode",{parentName:"p"},"List::member"),"."),Object(a.b)("p",null,"By looking through ",Object(a.b)("inlineCode",{parentName:"p"},"backend/test/test_other_libs.ml")," I see that ",Object(a.b)("inlineCode",{parentName:"p"},"t_list_stdlibs_work")," is the right place to add this test. An existing test looks like this:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ocaml"}),'check_dval\n  "List::singleton works"\n  (DList [Dval.dint 1])\n  (exec_ast (fn "List::singleton" [int 1])) ;\n')),Object(a.b)("p",null,"Let's go through this:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"check_dval")," is a test that checks that its 2nd and 3rd arguments are the\nsame ",Object(a.b)("inlineCode",{parentName:"li"},"dval")," (a ",Object(a.b)("inlineCode",{parentName:"li"},"dval")," is a Dark value; every string, int, option, list, etc,\nare all represented as ",Object(a.b)("inlineCode",{parentName:"li"},"dvals"),". See\n",Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/darklang/dark/blob/main/backend/libexecution/types.ml"}),Object(a.b)("inlineCode",{parentName:"a"},"backend/libexecution/types.ml")),"\nfor the definition)."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"(DList [Dval.dint 1])")," is a run-time Dark value with a list containing an\nint. In Dark, this would be ",Object(a.b)("inlineCode",{parentName:"li"},"[1]")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"exec_ast")," is a function to execute a given AST (",Object(a.b)("inlineCode",{parentName:"li"},"AST"),' means "abstract\nsyntax tree" and is a compiler-y term for "some classes that represent a\nprogram".).'),Object(a.b)("li",{parentName:"ul"},"The AST being executed is a function call (",Object(a.b)("inlineCode",{parentName:"li"},"fn"),") to ",Object(a.b)("inlineCode",{parentName:"li"},"List::singleton"),", taking a\nsingle parameter, the integer ",Object(a.b)("inlineCode",{parentName:"li"},"1")),Object(a.b)("li",{parentName:"ul"},"So this test checks that calling ",Object(a.b)("inlineCode",{parentName:"li"},"List::singleton 1")," gets you ",Object(a.b)("inlineCode",{parentName:"li"},"[1]"),". That\nseems right.")),Object(a.b)("p",null,"Let's make one for ",Object(a.b)("inlineCode",{parentName:"p"},"List::member"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ocaml"}),'check_dval\n  "List::member works for empty lists"\n  (DBool false)\n  (exec_ast (fn "List::member" [list []; int 1])) ;\n')),Object(a.b)("p",null,"So this checks whether ",Object(a.b)("inlineCode",{parentName:"p"},"List::member [] 1")," is ",Object(a.b)("inlineCode",{parentName:"p"},"false")," as we expect."),Object(a.b)("p",null,"Add your function to ",Object(a.b)("inlineCode",{parentName:"p"},"t_list_stdlibs_work")," and save the file. It should\nautomatically recompile and run the test."),Object(a.b)("p",null,"Great, we're done!"))}b.isMDXComponent=!0},242:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=b(n),d=i,m=u["".concat(o,".").concat(d)]||u[d]||p[d]||a;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);