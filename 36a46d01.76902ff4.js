(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{173:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return u}));var r=a(2),n=a(11),i=(a(0),a(242)),o={id:"freshdesk",title:"Freshdesk Sample",sidebar_label:"Freshdesk Sample"},s={id:"tutorials/freshdesk",isDocsHomePage:!1,title:"Freshdesk Sample",description:"This guide will walk you through how you can use Freshdesk\u2019s API to access",source:"@site/docs/tutorials/freshdesk.md",permalink:"/tutorials/freshdesk",sidebar_label:"Freshdesk Sample",sidebar:"Tutorials",previous:{title:"Airtable Sample",permalink:"/tutorials/airtable"},next:{title:"Sample Canvases",permalink:"/tutorials/sample-canvases"}},c=[{value:"What You Need",id:"what-you-need",children:[]},{value:"Authenticating with Freshdesk",id:"authenticating-with-freshdesk",children:[]},{value:"Getting All of Your Tickets",id:"getting-all-of-your-tickets",children:[]},{value:"Filtering Your Tickets",id:"filtering-your-tickets",children:[]},{value:"Adding Ticket Information to a Datastore in Dark",id:"adding-ticket-information-to-a-datastore-in-dark",children:[]},{value:"Updating Ticket Information With Dark",id:"updating-ticket-information-with-dark",children:[]}],l={rightToc:c};function u(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This guide will walk you through how you can use Freshdesk\u2019s API to access\nticket information in Dark. You can find a sample canvas\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://darklang.com/a/sample-freshdesk"}),"here"),"."),Object(i.b)("h2",{id:"what-you-need"},"What You Need"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A Freshdesk account"),Object(i.b)("li",{parentName:"ul"},"Access to the ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://developers.freshdesk.com/"}),"Freshdesk API documentation")),Object(i.b)("li",{parentName:"ul"},"Access to your Freshdesk API key or username and password.")),Object(i.b)("h2",{id:"authenticating-with-freshdesk"},"Authenticating with Freshdesk"),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk/image2.png",alt:"freshdesk/image2.png"}))),Object(i.b)("p",null,"Freshdesk uses basic authentication - in this example, we\u2019ve chosen to use our\nAPI key and insert random text for the password, but you can replace those with\nyour username and password when using ",Object(i.b)("inlineCode",{parentName:"p"},"HttpClient::basicAuth"),"."),Object(i.b)("h2",{id:"getting-all-of-your-tickets"},"Getting All of Your Tickets"),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk/image4.png",alt:"freshdesk/image4.png"}))),Object(i.b)("p",null,"Freshdesk makes it pretty easy to return a simple list of all of your tickets.\nHowever, you may find that the information in this list is not quite what you\nare looking for - if you want details about a set of tickets, check the Adding\nTicket Information to a Datastore section."),Object(i.b)("h2",{id:"filtering-your-tickets"},"Filtering Your Tickets"),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk/image5.png",alt:"freshdesk/image5.png"}))),Object(i.b)("p",null,"Freshdesk also makes it pretty easy to get a filtered list of your tickets -\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://developers.freshdesk.com/api/#filter_tickets"}),"check their documentation"),"\nfor the query options. In this example, we are returning a list of all tickets\nwith a status of 3, which means Pending."),Object(i.b)("h2",{id:"adding-ticket-information-to-a-datastore-in-dark"},"Adding Ticket Information to a Datastore in Dark"),Object(i.b)("p",null,"In the following example, we are going to add a set of information from all of\nour tickets into a Dark datastore."),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk/image3.png",alt:"freshdesk/image3.png"}))),Object(i.b)("p",null,"Create a datastore to keep track of all of your ids. Because our primary use for\nthis datastore is to append the ids to our request URL, it\u2019s helpful to store\n",Object(i.b)("inlineCode",{parentName:"p"},"ticket_id")," as a string - you can also cast them to strings later if you\u2019d\nprefer."),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk/image8.png",alt:"freshdesk/image8.png"}))),Object(i.b)("p",null,"Create a worker to populate that table with all of your ticket ids."),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk/image6.png",alt:"freshdesk/image6.png"}))),Object(i.b)("p",null,"Create a datastore that contains all of the fields you want to save from your\ntickets--you can see all of your options in\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://developers.freshdesk.com/api/#view_a_ticket"}),"Freshdesk\u2019s API documentation"),"."),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk/image9.png",alt:"freshdesk/image9.png"}))),Object(i.b)("p",null,"Create a function to add the information about your tickets to your new\ndatastore. Note that, because we want information about the requester, we need\nto add the include parameter to our URL. For more information about this URL\nparameter, refer to the\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://developers.freshdesk.com/api/#view_a_ticket"}),"View a Ticket")," section of\nthe Freshdesk API."),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk/image1.png",alt:"freshdesk/mage1.png"}))),Object(i.b)("p",null,"Create a worker that performs a ",Object(i.b)("inlineCode",{parentName:"p"},"List::map")," on your list of ticket ids, and uses\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"addTicketstoDB")," function to populate your datastore."),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk//image7.png",alt:"freshdesk/image7.png"}))),Object(i.b)("p",null,"Once your run your worker, your datastore will be updated!"),Object(i.b)("h2",{id:"updating-ticket-information-with-dark"},"Updating Ticket Information With Dark"),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/img/tutorials/freshdesk/image10.png",alt:"freshdesk/image10.png"}))),Object(i.b)("p",null,"Updating ticket information using Dark can be fairly straightforward - the above\nexample shows us updating the priority of the ticket with id 1 to 4, which means\nUrgent Priority. For a full list of what can and can\u2019t be updated, refer to the\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://developers.freshdesk.com/api/#update_ticket"}),"Freshdesk API Documentation"),"."))}u.isMDXComponent=!0},242:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return h}));var r=a(0),n=a.n(r);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=n.a.createContext({}),u=function(e){var t=n.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=u(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},b=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(a),b=r,h=p["".concat(o,".").concat(b)]||p[b]||d[b]||i;return a?n.a.createElement(h,s(s({ref:t},l),{},{components:a})):n.a.createElement(h,s({ref:t},l))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);