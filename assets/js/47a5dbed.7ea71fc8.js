"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9873],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},74481:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>l,contentTitle:()=>s,metadata:()=>p,toc:()=>c,default:()=>u});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],l={id:"error-handling",title:"Error Handling",sidebar_label:"Error Handling"},s=void 0,p={unversionedId:"error-handling",id:"error-handling",isDocsHomePage:!1,title:"Error Handling",description:"The Dark code you write in your handlers is available as soon as you type",source:"@site/docs/error-handling.md",sourceDirName:".",slug:"/error-handling",permalink:"/error-handling",editUrl:"https://github.com/darklang/docs/edit/main/docs/error-handling.md",tags:[],version:"current",frontMatter:{id:"error-handling",title:"Error Handling",sidebar_label:"Error Handling"},sidebar:"docs",previous:{title:"Structured Editing",permalink:"/structured-editing"},next:{title:"Workers",permalink:"/component-worker"}},c=[{value:"Incomplete Code",id:"incomplete-code",children:[],level:2},{value:"Type errors",id:"type-errors",children:[],level:2},{value:"Error Rail",id:"error-rail",children:[],level:2}],d={toc:c};function u(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Dark code you write in your handlers is available as soon as you type\n(deployless). We have a number of built-in features to support this style of\nwriting, as well as dealing with errors."),(0,o.kt)("h2",{id:"incomplete-code"},"Incomplete Code"),(0,o.kt)("p",null,"Dark is expression based. When you see \"incomplete code\", it means that your\nprogram isn't complete - that is, an expression hasn't been filled in. Once\nyou've filled in every expression in the associated code block, the problem will\nbe resolved."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")," Here we've bound a string to the new variable ",(0,o.kt)("inlineCode",{parentName:"p"},"msg")," within an empty\nblock, using a ",(0,o.kt)("inlineCode",{parentName:"p"},"let"),". Since the body of the ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," is empty, the expression as a\nwhole is incomplete. To resolve the problem, fill in the body of the ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," (for\nexample, with ",(0,o.kt)("inlineCode",{parentName:"p"},"msg"),")."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"error/image11.png",src:r(47746).Z})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")," Here we left the query parameter blank in a call to\n",(0,o.kt)("inlineCode",{parentName:"p"},"HttpClient::get"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"error/image13.png",src:r(54367).Z})),(0,o.kt)("p",null,"We need to fill in all parameters, here we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"{}"),"."),(0,o.kt)("p",null,"When something is incomplete, it will be shown with a red underline. An\nexpression may be incomplete even if it seems fine: this is because something it\ndepends on is incomplete. For example, in the case below we are returning ",(0,o.kt)("inlineCode",{parentName:"p"},"var"),"\nbut never defined it:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"error/image10.png",src:r(27817).Z})),(0,o.kt)("p",null,'In these cases, we provide a link to the source of the incomplete. Click on\n"click to locate source" and it will take you to the first blank that has\npropagated until the result you are looking for.'),(0,o.kt)("h2",{id:"type-errors"},"Type errors"),(0,o.kt)("p",null,'When you see "invalid code", it means that your program is complete but has\nissues (which are almost always type error). The error message should have\nenough . Carefully read the message to see what\'s wrong.'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("p",null,"Here we tried to use ",(0,o.kt)("inlineCode",{parentName:"p"},"DB::set")," with an Int for the ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," parameter, even though\n",(0,o.kt)("inlineCode",{parentName:"p"},"key")," needs to be a string."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"error/image14.png",src:r(26833).Z})),(0,o.kt)("p",null,"To resolve this problem, we can use a string instead. ",(0,o.kt)("inlineCode",{parentName:"p"},'"123"')," or\n",(0,o.kt)("inlineCode",{parentName:"p"},"123 |> toString")," will both work."),(0,o.kt)("h2",{id:"error-rail"},"Error Rail"),(0,o.kt)("p",null,"The error rail allows you to keep writing code along the \u201chappy path,\u201d without\nstopping to handle errors. This is based on\n",(0,o.kt)("a",{parentName:"p",href:"https://blog.darklang.com/real-problems-with-functional-languages"},"Railway Oriented Programming"),"\nand the UI elements are unique to Dark."),(0,o.kt)("p",null,"You can learn more about\n",(0,o.kt)("a",{parentName:"p",href:"/unique-aspects#functions-that-use-error-rail"},"which functions go to the error rail and how it works"),"."))}u.isMDXComponent=!0},27817:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/image10-552468def66c5166b9fca7dff6ad0c92.png"},47746:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/image11-ee07ad1b849e64b4120c3948e596aa90.png"},54367:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/image13-6c8f72633e566f6cea4e08f7cfd1f705.png"},26833:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/image14-fce436e102cbd6bd8e04f7afe09eedff.png"}}]);