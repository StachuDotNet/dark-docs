"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[627],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),f=i,m=c["".concat(l,".").concat(f)]||c[f]||d[f]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},47155:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>l,metadata:()=>u,toc:()=>p,default:()=>c});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],s={title:"Adding your first test"},l=void 0,u={unversionedId:"contributing/adding-your-first-test",id:"contributing/adding-your-first-test",isDocsHomePage:!1,title:"Adding your first test",description:"Let's talk you through the first contribution. You'll write a small unit test",source:"@site/docs/contributing/adding-your-first-test.md",sourceDirName:"contributing",slug:"/contributing/adding-your-first-test",permalink:"/contributing/adding-your-first-test",editUrl:"https://github.com/darklang/docs/edit/main/docs/contributing/adding-your-first-test.md",tags:[],version:"current",frontMatter:{title:"Adding your first test"},sidebar:"Contributing",previous:{title:"Setting up the Dark repo",permalink:"/contributing/setting-up-the-repo"},next:{title:"Making your first Pull Request",permalink:"/contributing/making-your-first-pull-request"}},p=[{value:"Find a function that needs tests",id:"find-a-function-that-needs-tests",children:[],level:2},{value:"Adding the test",id:"adding-the-test",children:[],level:2}],d={toc:p};function c(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Let's talk you through the first contribution. You'll write a small unit test\nfor a built-in function. This will get you through the process of contributing\nand get you familiar with how to get code into Dark."),(0,o.kt)("h2",{id:"find-a-function-that-needs-tests"},"Find a function that needs tests"),(0,o.kt)("p",null,"Assuming the repo is set up and the ",(0,o.kt)("inlineCode",{parentName:"p"},"builder")," script is running, let's find\nsomething to test."),(0,o.kt)("p",null,"First let's see what functions exist:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'cat fsharp-backend/src/*/StdLib/*.fs | grep -v "//" | perl -n -e \'foreach ($_ =~ /name = fn "([A-Za-z0-9]+)" "([A-Za-z0-9]+)" (\\d)/ ) { print "$1::$2_v$3\\n" } \' | sort | uniq > exists')),(0,o.kt)("p",null,"And now which ones are tested:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cat fsharp-backend/tests/testfiles/*.tests | grep -v '^\\[' | grep -v \"^\\/\\/\" | perl -n -e 'foreach ($_ =~ /([A-Za-z0-9]+)\\.([A-Za-z0-9]+_v\\d)/ ) { print \"$1::$2\\n\" } ' | grep -v Test | sort | uniq > tested")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(Note that if these commands don't work for you, you can open a shell in the\ndev container with ",(0,o.kt)("inlineCode",{parentName:"em"},"./scripts/run-in-docker bash"),", and run them there).")),(0,o.kt)("p",null,"Now compare them:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"diff -u tested exists")),(0,o.kt)("p",null,"You'll see stuff like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"@@ -7,6 +7,14 @@\n Bytes::base64Encode_v0\n Bytes::hexEncode_v0\n Bytes::length_v0\n+DB::add_v0\n+DB::deleteAll_v0\n+DB::delete_v0\n+DB::fetchAll_v0\n")),(0,o.kt)("p",null,"The functions with a ",(0,o.kt)("inlineCode",{parentName:"p"},"+")," in front of them do not have tests. Pick your favorite."),(0,o.kt)("h2",{id:"adding-the-test"},"Adding the test"),(0,o.kt)("p",null,"As an example, let's add one for ",(0,o.kt)("inlineCode",{parentName:"p"},"Float::add_v0"),"."),(0,o.kt)("p",null,"Unit tests for Dark functions are in ",(0,o.kt)("inlineCode",{parentName:"p"},'fsharp-backend/Tests/testfiles/*.tests"'),",\ntypically named after the module we're in (eg, in this case, we want\n",(0,o.kt)("inlineCode",{parentName:"p"},"float.tests"),"). See testfiles/README.md to see the format. An example test is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-fsharp"},"Float.multiply_v0 26.0 0.5 = 13.0\n")),(0,o.kt)("p",null,"This tests the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Float::multiply_v0")," by giving it parameters and an\nexpected result. We can write much more complicated functions too"),(0,o.kt)("p",null,"Let's make one for ",(0,o.kt)("inlineCode",{parentName:"p"},"Float::add_v0"),":"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Float.add_v0 26.0 0.5 = 26.5")),(0,o.kt)("p",null,"Add this to ",(0,o.kt)("inlineCode",{parentName:"p"},"float.tests"),", save the file, and it should automatically recompile\nand run the test."),(0,o.kt)("p",null,"Great, we're done!"))}c.isMDXComponent=!0}}]);